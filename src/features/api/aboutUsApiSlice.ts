import apiServices from "../../common/apiServices";

// Define the interface for About Us
export interface AboutUs {
  id: number;
  title: string;
  content: string;
}

// Define the DTO interface for About Us
export interface AboutUsDTO {
  id: number;
  title: string;
  content: string;
  languageId: number;
  languageName: string;
  imageProfileId: number;
  imageData: any; // Use Uint8Array for binary data
}

// Define the tag types
export const ABOUT_US_TAGS = ['AboutUs'] as const;

// Enhance the API service with additional tag types
const aboutUsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: ABOUT_US_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all About Us entries
      getAllAboutUsDto: builder.query<AboutUsDTO[], void>({
        query: () => ({
          url: '/aboutUsDtoAll',
          method: 'GET',
        }),
        providesTags: [ABOUT_US_TAGS[0]], // Tag for the list of About Us entries
      }),
      // Endpoint to fetch a specific About Us entry by ID
      getAboutUsById: builder.query<AboutUs, number>({
        query: (id) => ({
          url: `/aboutUs/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: ABOUT_US_TAGS[0], id }], // Tag for individual About Us entry
      }),
//
      // Endpoint to create a new About Us entry
      createAboutUs: builder.mutation<AboutUs, { languageId: any; imageProfileId: any; data: Partial<AboutUs> }>({
        query: ({ languageId, imageProfileId, data }) => ({
          url: `/aboutUs?languageId=${languageId}&imageProfileId=${imageProfileId}`, // Add query parameters to the URL
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [ABOUT_US_TAGS[0]], // Invalidate the entire list of About Us entries
      }),
      // Endpoint to update an existing About Us entry by ID
      updateAboutUs: builder.mutation<AboutUs, { id: number; data: Partial<AboutUs> }>({
        query: ({ id, data }) => ({
          url: `/aboutUs/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [ABOUT_US_TAGS[0]], // Invalidate the entire list of About Us entries
      }),
      // Endpoint to delete a specific About Us entry by ID
      deleteAboutUs: builder.mutation<void, number>({
        query: (id) => ({
          url: `/aboutUs/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [ABOUT_US_TAGS[0]], // Invalidate the entire list of About Us entries
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllAboutUsDtoQuery,
  useGetAboutUsByIdQuery,
  useCreateAboutUsMutation,
  useUpdateAboutUsMutation,
  useDeleteAboutUsMutation,
} = aboutUsApiSlice;

// Default export for the slice
export default aboutUsApiSlice;
